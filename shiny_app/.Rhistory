plot(lasso.fit, breaks=FALSE)
legend("topleft", covnames, pch=8, lty=1:length(covnames), col=1:length(covnames))
install.packages('lars')
library(lars)
lasso.fit <- lars(as.matrix(x), y, type="lasso", trace=TRUE)
png(file="Plots/selection-plots-04.png", width=432, height=432, pointsize=8)
plot(lasso.fit, breaks=FALSE)
legend("topleft", covnames, pch=8, lty=1:length(covnames), col=1:length(covnames))
png(file="Plots/selection-plots-05.png", width=432, height=432, pointsize=12)
lasso.cv <- cv.lars(as.matrix(x), y, K=10, type="lasso", trace=TRUE)
dev.off()
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
inBuild <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
validation <- Wage[-inBuild,]; buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage,
p=0.7, list=FALSE)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
dim(training)
dim(testing)
dim(validation)
mod1 <- train(wage ~.,method="glm",data=training)
mod2 <- train(wage ~.,method="rf",
data=training,
trControl = trainControl(method="cv"),number=3)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
predDF <- data.frame(pred1,pred2,wage=testing$wage)
combModFit <- train(wage ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
sqrt(sum((pred1-testing$wage)^2))
sqrt(sum((pred2-testing$wage)^2))
sqrt(sum((combPred-testing$wage)^2))
pred1V <- predict(mod1,validation); pred2V <- predict(mod2,validation)
predVDF <- data.frame(pred1=pred1V,pred2=pred2V)
combPredV <- predict(combModFit,predVDF)
sqrt(sum((pred1V-validation$wage)^2))
sqrt(sum((pred2V-validation$wage)^2))
sqrt(sum((combPredV-validation$wage)^2))
summary(combModFit)
install.packages('quantmod')
library(quantmod)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG")
mGoog <- to.monthly(GOOG)
View(GOOG)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
kMeans1 <- kmeans(subset(training,select=-c(Species)),centers=3)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width,Petal.Length,colour=clusters,data=training)
table(kMeans1$cluster,training$Species)
modFit <- train(clusters ~.,data=subset(training,select=-c(Species)),method="rpart")
table(predict(modFit,training),training$Species)
testClusterPred <- predict(modFit,testing)
table(testClusterPred ,testing$Species)
testClusterPred <- predict(modFit,testing)
table(testClusterPred ,testing$Species)
?download.file
training <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./pml-training.csv")
dim(training)
training <- download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./pml-training.csv")
training <- read.csv(download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./pml-training.csv"))
training <- read.csv(download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./pml-training.csv")
pwd()
wd()
getwd()
Sys.getenv("PATH")
install.packages('shiny')
find.package("devtools")
library(shiny)
library(devtools)
find_rtools()
find_rtools()
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app3')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app3')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app3')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app3')
?numericInput
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app4')
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app5')
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app5')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app6')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app7')
install.packages('miniUI')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
library(gapminder)
install.packages('gapminder')
max_le_by_cont <- ddply(gapminder, ~ continent, summarize, max_le = max(lifeExp))
library(gapminder)
library(dplyr)
max_le_by_cont <- ddply(gapminder, ~ continent, summarize, max_le = max(lifeExp))
library(plyr)
library(gapminder)
library(plyr)
max_le_by_cont <- ddply(gapminder, ~ continent, summarize, max_le = max(lifeExp))
View(gapminder)
View(max_le_by_cont)
max_le_by_cont <- ddply(gapminder, ~ continent, summarize, max_le = sum(lifeExp))
View(max_le_by_cont)
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/app7')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage( # like ui.R
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) { # like server.R
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel( # main body of the pain
selectInput("num1", "First Number", choices=numbers1), # drag down box
selectInput("num2", "Second Number", choices=numbers2) # NB choices comes from function
)
)
server <- function(input, output, session) {
observeEvent(input$done, { # care with {}
num1 <- as.numeric(input$num1) # create num1/2 so easier to work with
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server) # need to have this
}
multiplyNumbers(1:10, 1:10)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush") # name of plot is plot, brush is brush
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({ # note {}
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, # stop after collecting brushed points
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
trees_picked <- pickTrees()
trees_picked
install.packages("leaflet")
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
View(df)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
hopkinsIcon <- makeIcon(
iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
# define hopkins lat long combinations
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon) # use hopkins icon
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617, 39.2970681, 39.2824806),
lng = c(-76.5929798, -76.6206598, -76.5469683, -76.6150537, -76.6016766))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon) # use hopkins icon
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
# use cluster options so they break apart depending on granularity
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
titanicIcon <- makeIcon(
iconUrl = "https://images-na.ssl-images-amazon.com/images/M/MV5BZDNiMjE0NDgtZWRhNC00YTlhLTk2ZjItZTQzNTU2NjAzNWNkXkEyXkFqcGdeQXVyNjUwNzk3NDc@._V1_UY1200_CR88,0,630,1200_AL_.jpg",
iconWidth = 31*469/894, iconHeight = 31,
iconAnchorX = 31*469/894/2, iconAnchorY = 16
)
# define hopkins lat long combinations
titanic_latlong <- data.frame(lat = c(41.726931), lng = c(-49.948253))
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon)
# create custom icon
titanicIcon <- makeIcon(
iconUrl = "http://img03.deviantart.net/48fc/i/2012/208/b/7/titanic_png_stock_by_pixelmixtur_stocks-d58vvw3.png",
iconWidth = 31*722/543, iconHeight = 31,
iconAnchorX = 31*722/543/2, iconAnchorY = 16
)
# define hopkins lat long combinations
titanic_latlong <- data.frame(lat = c(41.726931), lng = c(-49.948253))
# use hopkins icon
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon)
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(zoom = 12)
?addMarkers
?setView
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(lng = titanic_latlong$lng, lat = titanic_latlong$lat, zoom = 12)
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(lng = titanic_latlong$lng, lat = titanic_latlong$lat, zoom = 5)
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(lng = titanic_latlong$lng, lat = titanic_latlong$lat, zoom = 3)
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(lng = titanic_latlong$lng, lat = titanic_latlong$lat, zoom = 4)
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(lng = titanic_latlong$lng, lat = titanic_latlong$lat, zoom = 3.75)
titanic_latlong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = titanicIcon) %>%
setView(lng = titanic_latlong$lng, lat = titanic_latlong$lat, zoom = 4)
colSums()
colSums
show
mean
predict
lm
dgamma
download.packages('DDPQuiz3')
install.packages(DDPQuiz3)
install.packages('DDPQuiz3')
library(DDPQuiz3)
library(swirl)
swirl()
install.packages('swirlify')
install.packages("swirlify")
knitr::opts_chunk$set(echo = FALSE)
data("ChickWeight")
chickweight <- data("ChickWeight")
View(chickweight)
chickweight <- data("ChickWeight")
dim(chickweight)
dim(chickweight)
data("ChickWeight")
dim(chickweight)
dim(ChickWeight)
View(ChickWeight)
library(MASS)
dim(quine)
data(quine)
dim(quine)
View(quine)
data(Animals)
dim(Animals)
View(Animals)
plot_ly(Animals, x = ~body, y = ~brain, mode = "markers")
library(plotly)
plot_ly(Animals, x = ~body, y = ~brain, mode = "markers")
plot_ly(Animals, x = ~body, y = ~brain, mode = "markers")
plot_ly(Animals, x = body, y = brain, mode = "markers")
?plot_ly
data(Aids2)
dim(Aids2)
View(Aids2)
?Aids2
data(women)
dim(women)
View(women)
??MASS
data(anorexia)
dim(anorexia)
View(anorexia)
??plot_ly
data(anorexia)
anorexia$wt_change <- anorexia$Postwt / anorexia$Prewt -1
View(anorexia)
View(anorexia)
plot_ly(anorexia, y = ~wt_change, color = ~Treat, type = "box")
View(ChickWeight)
View(anorexia)
plot_ly(anorexia, y = wt_change, color = ~Treat, type = "box")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
data(iris)
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
plot_ly(anorexia, y = ~wt_change, type = "box", color = ~Treat)
plot_ly(anorexia, y = wt_change, type = "box", color = Treat)
plot_ly(anorexia, y = wt_change, type = "box", color = Treat)
??anorexia
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(yaxis = "Percent Weight Change")
?layout
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(xaxis = "Treatment", yaxis = "Percent Weight Change")
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(xaxis = list(title = "Treatment"), yaxis = list("Percent Weight Change"))
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(xaxis = list(title = "Treatment", titlefont = f), yaxis = list(title = "Percent Weight Change", titlefont = f))
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(xaxis = list(title = "Treatment"), yaxis = list(title = "Percent Weight Change"))
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(yaxis = list(title = "Percent Weight Change"))
?rename
?layout
?anorexia
anorexia$Treat[anorexia$Treat == "FT"] <- "Family Therapy"
anorexia$Treat[anorexia$Treat == "Cont"] <- "Control"
anorexia$Treat[anorexia$Treat == "CBT"] <- "Cognitive Behavioural Treatment"
View(anorexia)
library(MASS)
data("anorexia")
anorexia$Treat[anorexia$Treat == "FT"] <- "Family Therapy"
?levels
library(MASS)
data("anorexia")
levels(anorexia$Treat)[levels(anorexia$Treat)=="FT"] <- "Family Therapy"
View(anorexia)
library(MASS)
data("anorexia")
levels(anorexia$Treat)[levels(anorexia$Treat)=="FT"] <- "Family Therapy"
levels(anorexia$Treat)[levels(anorexia$Treat)=="Cont"] <- "Control"
levels(anorexia$Treat)[levels(anorexia$Treat)=="CBT"] <- "Cognitive Behavioural Treatment"
anorexia$wt_change <- anorexia$Postwt / anorexia$Prewt -1
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(yaxis = list(title = "Percent Weight Change"))
data("anorexia")
anorexia$wt_change <- anorexia$Postwt / anorexia$Prewt -1
plot_ly(anorexia, y = wt_change, type = "box", color = Treat) %>%
layout(yaxis = list(title = "Percent Weight Change"))
knitr::opts_chunk$set(echo = FALSE, eval = FALSE)
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
?numericInput
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
?dateInput
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
library(rpart)
??rpart
?fit
?rpart
??datasets
?rpart
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
library(shiny); library(rpart); library(ISLR)
# load default data
data(Default)
default <-data(Default)
fit <- rpart(default~., method="class", data=Default)
printcp(fit)
plot(fit)
text(fit)
?post
post(fit)
summary(fit)
plotcp(fit)
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
?rpart
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
??datasets
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
data(ptitanic)
library(shiny); library(rpart); library(rpart.plot)
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
data("ptitanic")
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/weight_tracking')
shiny::runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
?ptitanic
runApp('C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='mitchjt', token='60CBA7D54D541FCAA1D6C8168A96E1C0', secret='0nBfDNxb34Aar7BDmXqDYFD0/IpkXf7oe1E0i5x7')
deployApp()
setwd("C:/Users/MT84249/Desktop/personal/coursera/data_products/shiny_app")
deployApp()
